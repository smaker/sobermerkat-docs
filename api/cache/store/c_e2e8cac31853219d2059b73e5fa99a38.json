{
    "name": "PHPExcel_Calculation_Logical",
    "line": 37,
    "short_desc": "PHPExcel_Calculation_Logical",
    "long_desc": "Copyright (c) 2006 - 2015 PHPExcel\n\nThis library is free software; you can redistribute it and\/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA",
    "hint": null,
    "tags": {
        "category": [
            [
                "PHPExcel"
            ]
        ],
        "package": [
            [
                "PHPExcel_Calculation"
            ]
        ],
        "copyright": [
            [
                "Copyright",
                "(c)",
                "2006",
                "-",
                "2015",
                "PHPExcel",
                "(http:\/\/www.codeplex.com\/PHPExcel)"
            ]
        ],
        "license": [
            [
                "http:\/\/www.gnu.org\/licenses\/old-licenses\/lgpl-2.1.txt",
                "",
                "",
                "",
                "LGPL"
            ]
        ],
        "version": [
            [
                "##VERSION##,",
                "##DATE##"
            ]
        ]
    },
    "namespace": "",
    "file": "\/Users\/dowon\/Documents\/[\uc758\ub8b0|\uc3d8\ubc84\ub9c8\ucf13]\/lib\/PHPExcel\/Calculation\/Logical.php",
    "relative_file": null,
    "hash": "6b7c3e5a526aa7f68e26ada98f7d5f31c060d1af",
    "parent": null,
    "modifiers": 0,
    "is_trait": false,
    "is_interface": false,
    "is_read_only": false,
    "aliases": null,
    "errors": [],
    "interfaces": [],
    "traits": [],
    "properties": [],
    "methods": {
        "TRUE": {
            "name": "TRUE",
            "line": 51,
            "short_desc": "TRUE",
            "long_desc": "Returns the boolean TRUE.\n\nExcel Function:\n       =TRUE()",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "True",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "FALSE": {
            "name": "FALSE",
            "line": 69,
            "short_desc": "FALSE",
            "long_desc": "Returns the boolean FALSE.\n\nExcel Function:\n       =FALSE()",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "False",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "LOGICAL_AND": {
            "name": "LOGICAL_AND",
            "line": 96,
            "short_desc": "LOGICAL_AND",
            "long_desc": "Returns boolean TRUE if all its arguments are TRUE; returns FALSE if one or more argument is FALSE.\n\nExcel Function:\n       =AND(logical1[,logical2[, ...]])\n\n       The arguments must evaluate to logical values such as TRUE or FALSE, or the arguments must be arrays\n           or references that contain logical values.\n\n       Boolean arguments are treated as True or False as appropriate\n       Integer or floating point arguments are treated as True, except for 0 or 0.0 which are False\n       If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string holds\n           the value TRUE or FALSE, in which case it is evaluated as the corresponding boolean value",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "The logical AND of the arguments.",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [
                "The method \"LOGICAL_AND\" has \"1\" @param tags but only \"0\" where expected."
            ],
            "parameters": []
        },
        "LOGICAL_OR": {
            "name": "LOGICAL_OR",
            "line": 152,
            "short_desc": "LOGICAL_OR",
            "long_desc": "Returns boolean TRUE if any argument is TRUE; returns FALSE if all arguments are FALSE.\n\nExcel Function:\n       =OR(logical1[,logical2[, ...]])\n\n       The arguments must evaluate to logical values such as TRUE or FALSE, or the arguments must be arrays\n           or references that contain logical values.\n\n       Boolean arguments are treated as True or False as appropriate\n       Integer or floating point arguments are treated as True, except for 0 or 0.0 which are False\n       If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string holds\n           the value TRUE or FALSE, in which case it is evaluated as the corresponding boolean value",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "The logical OR of the arguments.",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [
                "The method \"LOGICAL_OR\" has \"1\" @param tags but only \"0\" where expected."
            ],
            "parameters": []
        },
        "NOT": {
            "name": "NOT",
            "line": 207,
            "short_desc": "NOT",
            "long_desc": "Returns the boolean inverse of the argument.\n\nExcel Function:\n       =NOT(logical)\n\n       The argument must evaluate to a logical value such as TRUE or FALSE\n\n       Boolean arguments are treated as True or False as appropriate\n       Integer or floating point arguments are treated as True, except for 0 or 0.0 which are False\n       If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string holds\n           the value TRUE or FALSE, in which case it is evaluated as the corresponding boolean value",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "The boolean inverse of the argument.",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": {
                "logical": {
                    "name": "logical",
                    "line": 207,
                    "short_desc": "A value or expression that can be evaluated to TRUE or FALSE",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": 0,
                    "default": "false",
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                }
            }
        },
        "STATEMENT_IF": {
            "name": "STATEMENT_IF",
            "line": 256,
            "short_desc": "STATEMENT_IF",
            "long_desc": "Returns one value if a condition you specify evaluates to TRUE and another value if it evaluates to FALSE.\n\nExcel Function:\n       =IF(condition[,returnIfTrue[,returnIfFalse]])\n\n       Condition is any value or expression that can be evaluated to TRUE or FALSE.\n           For example, A10=100 is a logical expression; if the value in cell A10 is equal to 100,\n           the expression evaluates to TRUE. Otherwise, the expression evaluates to FALSE.\n           This argument can use any comparison calculation operator.\n       ReturnIfTrue is the value that is returned if condition evaluates to TRUE.\n           For example, if this argument is the text string \"Within budget\" and the condition argument evaluates to TRUE,\n           then the IF function returns the text \"Within budget\"\n           If condition is TRUE and ReturnIfTrue is blank, this argument returns 0 (zero). To display the word TRUE, use\n           the logical value TRUE for this argument.\n           ReturnIfTrue can be another formula.\n       ReturnIfFalse is the value that is returned if condition evaluates to FALSE.\n           For example, if this argument is the text string \"Over budget\" and the condition argument evaluates to FALSE,\n           then the IF function returns the text \"Over budget\".\n           If condition is FALSE and ReturnIfFalse is omitted, then the logical value FALSE is returned.\n           If condition is FALSE and ReturnIfFalse is blank, then the value 0 (zero) is returned.\n           ReturnIfFalse can be another formula.",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "The value of returnIfTrue or returnIfFalse determined by condition",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": {
                "condition": {
                    "name": "condition",
                    "line": 256,
                    "short_desc": "Condition to evaluate",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": 0,
                    "default": "true",
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                },
                "returnIfTrue": {
                    "name": "returnIfTrue",
                    "line": 256,
                    "short_desc": "Value to return when condition is true",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": 0,
                    "default": "0",
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                },
                "returnIfFalse": {
                    "name": "returnIfFalse",
                    "line": 256,
                    "short_desc": "Optional value to return when condition is false",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": 0,
                    "default": "false",
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                }
            }
        },
        "IFERROR": {
            "name": "IFERROR",
            "line": 278,
            "short_desc": "IFERROR",
            "long_desc": "Excel Function:\n=IFERROR(testValue,errorpart)",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "The value of errorpart or testValue determined by error condition",
            "tags": {
                "access": [
                    [
                        "public"
                    ]
                ],
                "category": [
                    [
                        "Logical",
                        "Functions"
                    ]
                ]
            },
            "see": [],
            "modifiers": 9,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": {
                "testValue": {
                    "name": "testValue",
                    "line": 278,
                    "short_desc": "Value to check, is also the value returned when no error",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": 0,
                    "default": "''",
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                },
                "errorpart": {
                    "name": "errorpart",
                    "line": 278,
                    "short_desc": "Value to return when testValue is an error condition",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": 0,
                    "default": "''",
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                }
            }
        }
    },
    "constants": []
}