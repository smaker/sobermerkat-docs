{
    "name": "SingularValueDecomposition",
    "line": 20,
    "short_desc": "",
    "long_desc": "",
    "hint": null,
    "tags": {
        "package": [
            [
                "JAMA\n\nFor",
                "an",
                "m-by-n",
                "matrix",
                "A",
                "with",
                "m",
                ">=",
                "n,",
                "the",
                "singular",
                "value",
                "decomposition",
                "is\nan",
                "m-by-n",
                "orthogonal",
                "matrix",
                "U,",
                "an",
                "n-by-n",
                "diagonal",
                "matrix",
                "S,",
                "and\nan",
                "n-by-n",
                "orthogonal",
                "matrix",
                "V",
                "so",
                "that",
                "A",
                "=",
                "U*S*V'.\n\nThe",
                "singular",
                "values,",
                "sigma[$k]",
                "=",
                "S[$k][$k],",
                "are",
                "ordered",
                "so",
                "that\nsigma[0]",
                ">=",
                "sigma[1]",
                ">=",
                "...",
                ">=",
                "sigma[n-1].\n\nThe",
                "singular",
                "value",
                "decompostion",
                "always",
                "exists,",
                "so",
                "the",
                "constructor",
                "will\nnever",
                "fail.",
                "",
                "The",
                "matrix",
                "condition",
                "number",
                "and",
                "the",
                "effective",
                "numerical\nrank",
                "can",
                "be",
                "computed",
                "from",
                "this",
                "decomposition.\n\n@author",
                "",
                "Paul",
                "Meagher\n@license",
                "PHP",
                "v3.0\n@version",
                "1.1"
            ]
        ]
    },
    "namespace": "",
    "file": "\/Users\/dowon\/Documents\/[\uc758\ub8b0|\uc3d8\ubc84\ub9c8\ucf13]\/lib\/PHPExcel\/Shared\/JAMA\/SingularValueDecomposition.php",
    "relative_file": null,
    "hash": "8218c87a3addd1aa61f81cb960d87669097a9c19",
    "parent": null,
    "modifiers": 0,
    "is_trait": false,
    "is_interface": false,
    "is_read_only": false,
    "aliases": null,
    "errors": [],
    "interfaces": [],
    "traits": [],
    "properties": [],
    "methods": {
        "__construct": {
            "name": "__construct",
            "line": 60,
            "short_desc": "Construct the singular value decomposition",
            "long_desc": "Derived from LINPACK code.",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [
                "The \"Arg\" parameter of the method \"__construct\" is missing a @param tag"
            ],
            "parameters": {
                "Arg": {
                    "name": "Arg",
                    "line": 60,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": null,
                    "tags": [],
                    "modifiers": 0,
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                }
            }
        },
        "getU": {
            "name": "getU",
            "line": 438,
            "short_desc": "Return the left singular vectors",
            "long_desc": " @access public",
            "hint": [
                [
                    "\\U",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "getV": {
            "name": "getV",
            "line": 450,
            "short_desc": "Return the right singular vectors",
            "long_desc": " @access public",
            "hint": [
                [
                    "\\V",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "getSingularValues": {
            "name": "getSingularValues",
            "line": 462,
            "short_desc": "Return the one-dimensional array of singular values",
            "long_desc": " @access public",
            "hint": [
                [
                    "\\diagonal",
                    false
                ]
            ],
            "hint_desc": "of S.",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "getS": {
            "name": "getS",
            "line": 474,
            "short_desc": "Return the diagonal matrix of singular values",
            "long_desc": " @access public",
            "hint": [
                [
                    "\\S",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "norm2": {
            "name": "norm2",
            "line": 492,
            "short_desc": "Two norm",
            "long_desc": " @access public",
            "hint": [
                [
                    "\\max",
                    false
                ],
                [
                    "\\(\\S)",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "cond": {
            "name": "cond",
            "line": 504,
            "short_desc": "Two norm condition number",
            "long_desc": " @access public",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [
                "The hint on \"cond\" at @return is invalid: \"max(S)\/min(S)\""
            ],
            "parameters": []
        },
        "rank": {
            "name": "rank",
            "line": 516,
            "short_desc": "Effective numerical matrix rank",
            "long_desc": " @access public",
            "hint": [
                [
                    "\\Number",
                    false
                ]
            ],
            "hint_desc": "of nonnegligible singular values.",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        }
    },
    "constants": []
}