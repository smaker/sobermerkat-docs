{
    "name": "PHPExcel_Shared_JAMA_LUDecomposition",
    "line": 21,
    "short_desc": "",
    "long_desc": "",
    "hint": null,
    "tags": {
        "package": [
            [
                "JAMA\n\nFor",
                "an",
                "m-by-n",
                "matrix",
                "A",
                "with",
                "m",
                ">=",
                "n,",
                "the",
                "LU",
                "decomposition",
                "is",
                "an",
                "m-by-n\nunit",
                "lower",
                "triangular",
                "matrix",
                "L,",
                "an",
                "n-by-n",
                "upper",
                "triangular",
                "matrix",
                "U,\nand",
                "a",
                "permutation",
                "vector",
                "piv",
                "of",
                "length",
                "m",
                "so",
                "that",
                "A(piv,:)",
                "=",
                "L*U.\nIf",
                "m",
                "<",
                "n,",
                "then",
                "L",
                "is",
                "m-by-m",
                "and",
                "U",
                "is",
                "m-by-n.\n\nThe",
                "LU",
                "decompostion",
                "with",
                "pivoting",
                "always",
                "exists,",
                "even",
                "if",
                "the",
                "matrix",
                "is\nsingular,",
                "so",
                "the",
                "constructor",
                "will",
                "never",
                "fail.",
                "The",
                "primary",
                "use",
                "of",
                "the\nLU",
                "decomposition",
                "is",
                "in",
                "the",
                "solution",
                "of",
                "square",
                "systems",
                "of",
                "simultaneous\nlinear",
                "equations.",
                "This",
                "will",
                "fail",
                "if",
                "isNonsingular()",
                "returns",
                "false.\n\n@author",
                "Paul",
                "Meagher\n@author",
                "Bartosz",
                "Matosiuk\n@author",
                "Michael",
                "Bommarito\n@version",
                "1.1\n@license",
                "PHP",
                "v3.0"
            ]
        ]
    },
    "namespace": "",
    "file": "\/Users\/dowon\/Documents\/[\uc758\ub8b0|\uc3d8\ubc84\ub9c8\ucf13]\/lib\/PHPExcel\/Shared\/JAMA\/LUDecomposition.php",
    "relative_file": null,
    "hash": "23adadc3063d7ac755c548a5b7ae4008e645b441",
    "parent": null,
    "modifiers": 0,
    "is_trait": false,
    "is_interface": false,
    "is_read_only": false,
    "aliases": null,
    "errors": [],
    "interfaces": [],
    "traits": [],
    "properties": [],
    "methods": {
        "__construct": {
            "name": "__construct",
            "line": 62,
            "short_desc": "LU Decomposition constructor.",
            "long_desc": " @param $A Rectangular matrix",
            "hint": [
                [
                    "\\Structure",
                    false
                ]
            ],
            "hint_desc": "to access L, U and piv.",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": {
                "A": {
                    "name": "A",
                    "line": 62,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": null,
                    "tags": [],
                    "modifiers": 0,
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                }
            }
        },
        "getL": {
            "name": "getL",
            "line": 127,
            "short_desc": "Get lower triangular factor.",
            "long_desc": " @return array Lower triangular factor",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "getU": {
            "name": "getU",
            "line": 148,
            "short_desc": "Get upper triangular factor.",
            "long_desc": " @return array Upper triangular factor",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "getPivot": {
            "name": "getPivot",
            "line": 167,
            "short_desc": "Return pivot permutation vector.",
            "long_desc": " @return array Pivot vector",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "getDoublePivot": {
            "name": "getDoublePivot",
            "line": 177,
            "short_desc": "Alias for getPivot",
            "long_desc": " @see getPivot",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "isNonsingular": {
            "name": "isNonsingular",
            "line": 187,
            "short_desc": "Is the matrix nonsingular?",
            "long_desc": " @return true if U, and hence A, is nonsingular.",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "det": {
            "name": "det",
            "line": 202,
            "short_desc": "Count determinants",
            "long_desc": " @return array d matrix deterninat",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "solve": {
            "name": "solve",
            "line": 223,
            "short_desc": "Solve A*X = B",
            "long_desc": " @param  $B  A Matrix with as many rows as A and any number of columns.",
            "hint": [
                [
                    "\\X",
                    false
                ]
            ],
            "hint_desc": "so that L*U*X = B(piv,:)\n@PHPExcel_Calculation_Exception  IllegalArgumentException Matrix row dimensions must agree.\n@PHPExcel_Calculation_Exception  RuntimeException  Matrix is singular.",
            "tags": [],
            "see": [],
            "modifiers": 1,
            "is_by_ref": "",
            "is_intersection_type": false,
            "exceptions": [],
            "errors": [],
            "parameters": {
                "B": {
                    "name": "B",
                    "line": 223,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": null,
                    "tags": [],
                    "modifiers": 0,
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false,
                    "is_read_only": false,
                    "is_intersection_type": false
                }
            }
        }
    },
    "constants": {
        "MATRIX_SINGULAR_EXCEPTION": {
            "name": "MATRIX_SINGULAR_EXCEPTION",
            "line": 23,
            "short_desc": null,
            "long_desc": null,
            "modifiers": 0,
            "tags": []
        },
        "MATRIX_SQUARE_EXCEPTION": {
            "name": "MATRIX_SQUARE_EXCEPTION",
            "line": 24,
            "short_desc": null,
            "long_desc": null,
            "modifiers": 0,
            "tags": []
        }
    }
}